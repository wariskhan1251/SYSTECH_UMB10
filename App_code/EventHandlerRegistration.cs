using System;
using System.Linq;
using Umbraco.Web;
using Archetype.Models;
using System.IO;
using System.Globalization;
using Umbraco.Core;
using Umbraco.Core.Models;
using Umbraco.Core.Events;
using Umbraco.Core.Logging;
using Umbraco.Core.Publishing;
using Umbraco.Core.Services;
using System.Diagnostics;
using System.Collections.Generic;
using System.Web.Routing;

namespace DulwichEstate_Umbraco.App_code
{
    public class EventHandlerRegistration : ApplicationEventHandler
    {

        protected override void ApplicationInitialized(UmbracoApplicationBase umbracoApplication, ApplicationContext applicationContext)
        {
            base.ApplicationInitialized(umbracoApplication, applicationContext);
            //register an event here
        }

        protected override void ApplicationStarting(UmbracoApplicationBase umbracoApplication, ApplicationContext applicationContext)
        {
            base.ApplicationStarting(umbracoApplication, applicationContext);
            //or here
        }

        protected override void ApplicationStarted(UmbracoApplicationBase umbracoApplication, ApplicationContext applicationContext)
        {
            base.ApplicationStarted(umbracoApplication, applicationContext);
            //// ContentService.Publishing += MyCodeThatWillCancelPublishing;
            ContentService.Published += MyCustomCodeToRun;

            // Reference: https://github.com/umbraco/Umbraco-CMS/issues/5206
            // Reference: https://shazwazza.com/post/need-to-remove-an-auto-routed-controller-in-umbraco/

            // Note: RouteTable needs System.Web.dll
            RouteTable.Routes.Remove(RouteTable.Routes["umbraco-surface-UmbRegister"]);
            RouteTable.Routes.Remove(RouteTable.Routes["umbraco-surface-UmbProfile"]);
            RouteTable.Routes.Remove(RouteTable.Routes["umbraco-surface-UmbLogin"]);
            RouteTable.Routes.Remove(RouteTable.Routes["umbraco-surface-UmbLoginStatus"]);
            RouteTable.Routes.Remove(RouteTable.Routes["umbraco-surface-Tags"]);
            RouteTable.Routes.Remove(RouteTable.Routes["umbraco-api-Tags"]);

        }

        public void MyCustomCodeToRun(IPublishingStrategy pSaving, PublishEventArgs<IContent> pPublishing)
        {
            if (Solution.Common.Configuration.IsAlreadyPublising)
                return;

            Solution.Common.Configuration.IsAlreadyPublising = true;


            if (pPublishing == null)
            {
                Solution.Common.Configuration.IsAlreadyPublising = false;
                return;
            }
            if (pPublishing.PublishedEntities == null)
            {
                Solution.Common.Configuration.IsAlreadyPublising = false;
                return;
            }

            foreach (IContent item in pPublishing.PublishedEntities)
            {

                if (item == null)
                    continue;

                if (item.Id != null && item.Id != 0 && item.ParentId != 0 && (item.ParentId == 1448 || item.ParentId == 1408))
                {
                    ////string DomainUrl = "";
                    ////if (Solution.Common.Configuration.DomainUrl != null && !string.IsNullOrEmpty(Solution.Common.Configuration.DomainUrl))
                    ////    DomainUrl = Solution.Common.Configuration.DomainUrl;

                    int Id = 0;
                    if (item.GetValue("applicationID") != null && item.GetValue<int>("applicationID") > 0)
                        Id = item.GetValue<int>("applicationID");

                    if (item.ParentId == 1448)
                    {
                        if (Id == 0)
                        {
                            //ApplicationId autogenerated code for 
         
                            IList<IContent> publishedallcontents = ApplicationContext.Current.Services.ContentService.GetChildren(1448).Where(x => (x.ContentType.Alias != null && x.ContentType.Alias == "sOMApplicationPosts" && x.GetValue("applicationID") != null)).ToList();
                            if (publishedallcontents != null && publishedallcontents.Count > 0)
                            {
                                var MaxItemIdFromMainParentList = publishedallcontents.Where(x => x.GetValue("applicationID") != null).ToList().Max(y => y.GetValue<Int32>("applicationID"));
                                if (MaxItemIdFromMainParentList > Id)
                                    Id = MaxItemIdFromMainParentList;
                            }

                            Id++;
                        }

                        item.SetValue("applicationID", Id.ToString());
                    }
                    else if (item.ParentId == 1408)
                    {
                        if (Id == 0)
                        {
                            //applicationID autogenerated code for 
                            IList<IContent> publishedallcontents = ApplicationContext.Current.Services.ContentService.GetChildren(1408).Where(x => (x.ContentType.Alias != null && x.ContentType.Alias == "applicationForTreeWorksPosts" && x.GetValue("applicationID") != null)).ToList();
                            if (publishedallcontents != null && publishedallcontents.Count > 0)
                            {
                                var MaxItemIdFromMainParentList = publishedallcontents.Where(x => x.GetValue("applicationID") != null).ToList().Max(y => y.GetValue<Int32>("applicationID"));
                                if (MaxItemIdFromMainParentList > Id)
                                    Id = MaxItemIdFromMainParentList;
                            }
                            Id++;
                        }

                        item.SetValue("applicationID", Id.ToString());
                    }

                    ApplicationContext.Current.Services.ContentService.SaveAndPublishWithStatus(item);
                    //item.SetValue();
                    //// LogHelper.Info<EventHandlerRegistration>(item.Name + "Published By Waris Khanzada!!!!!!");
                }
                else
                {
                    LogHelper.Info<EventHandlerRegistration>(item.Name + " was published not performed action");
                }
            }

            Solution.Common.Configuration.IsAlreadyPublising = false;

        }


        public static string GetFileProcessName(string filePath)
        {

            Process[] procs = Process.GetProcesses();
            string fileName = Path.GetFileName(filePath);

            foreach (Process proc in procs)
            {
                if (proc.MainWindowHandle != new IntPtr(0) && !proc.HasExited)
                {
                    ProcessModule[] arr = new ProcessModule[proc.Modules.Count];
                    foreach (ProcessModule pm in proc.Modules)
                    {
                        if (pm.ModuleName == fileName)
                            return proc.ProcessName;
                    }
                }
            }


            return null;
        }

        private void MyCodeThatWillCancelPublishing(IPublishingStrategy sender, PublishEventArgs<IContent> args)
        {
            ////if (true)
            ////{
            ////    args.Cancel = true;
            ////}
        }





    }
}